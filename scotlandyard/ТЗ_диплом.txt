<dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.5</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>

Starta Institute 32  an  Alle 21:55
https://github.com/IuriiAV/java220823m

Sie  an  Alle 21:59
все таки как учесть в таблице десять одинаковых цветочных горшков?

slava  an  Alle 21:59
https://docs.google.com/document/d/1Xn41eFhdYAJVYzRucsNwpbLJ5lNxdvpfx__SZf5DwXA/edit?pli=1#heading=h.e2bcw3kuo1da

Антон Бережнов  an  Alle 22:00
lf

slava 22:00
https://skilldesk.starta.university/be-project-final он здесь


1. Тим лид - общий репозиторий
2. Структура проекта - мавен проект , spring boot 3, версия джава
3. Базу данных - определить общее имя, логин, пароль.(dependency)
4. Создание сущности user
5. Создание сущности category
6. Для каждой сущности создать контроллер, сервис, репозиторий, dto
DTO - Converter, ModelMapper, Mapstruct

7. Для пользователя создать методы регистрации нового, авторизации, обновления профиля, удаления, получение по id
8. Для категории создать методы списка всех категорий, добавления новой категории, получение по id
9. Перехвать исключений и обработать исключения 
10.Добавить Spring Security, Добавить работу с JWT
11.Добавить swagger


1. Предварительно для работы Liquibase :

После подключения Lb , все таблицы и любые изменения в базе данных будем создавать через Lb. Поэтому, закомментируем проперти авто генерации таблиц :

  #spring.jpa.hibernate.ddl-auto=update
  #spring.jpa.generate-ddl=true
Для базы данных H2, ничего не делаем, она при каждом запуске новая. Для базы данных MySql нужно поменять базу на чистую, так как теперь будем все делать через Lb.

2. Подключение Liquibase :

При работе со spring boot , подключение очень простое : Добавляем зависимость :

     <dependency>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-core</artifactId>
     </dependency>
В папке с ресурсами создаем каталог db и внутри него каталог changelog - в этом каталоге будет находиться скрипт со всеми изменения в для базы данных. В данный каталог поместим файл db.changelog-master.xml, пример данного файла присутствует в проекте. И в проперти укажем что изменения для Lb будут именно в этом файле spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml

3. Работа с БД.

Для каждого изменения создается секция changeset, пример :

<changeSet id="202308111253456" author="Anton Antonov">

</changeSet>
В поле id указываем уникальный идентификатор для этого changeSet, в одном проекте не должно быть дублирующихся id. Указываете автора изменений.

Создадим таблицу managers с помощью Lb:

  <changeSet id="202308111253456" author="Anton Antonov">
    <comment>Add managers table</comment>
    <createTable tableName="managers">
        <column autoIncrement="true" name="id" type="BIGINT">
            <constraints primaryKey="true" nullable="false" primaryKeyName="manager_pkey"/>
        </column>
        <column name="first_name" type="VARCHAR(255)"/>
        <column name="last_name" type="VARCHAR(255)"/>
    </createTable>
  </changeSet>
Колонок минимум только для примера.

Создадим таблицу clients с помощью Lb:

<changeSet id="202308121253758" author="Anton Antonov">
    <comment>Add clients table</comment>
    <createTable tableName="clients">
        <column name="id" type="BINARY(16)">
            <constraints primaryKey="true" nullable="false" primaryKeyName="client_pkey"/>
        </column>
        <column name="first_name" type="VARCHAR(255)"/>
        <column name="last_name" type="VARCHAR(255)"/>
        <column name="manager_id" type="BIGINT">
            <constraints foreignKeyName="manager_fkey"
                         referencedTableName="managers"
                         referencedColumnNames="id" nullable="false"/>
        </column>
    </createTable>
</changeSet>
После запуска вашего приложения , будут созданы указанные таблицы в том порядке, в котором они написаны в файле. Так же появятся две таблицы, databasechangelog в которой будет храниться перечень исполненных changeSet и они не будут выполняться повторно и таблица databasechangeloglock тех таблица на время применения изменений.

4. Простановка связей между таблицами:

Для таблицы clients мы создали в changeSet колонку , которая будет являться внешним ключом для менеджера. В классе Client прописали это поле как:

  @ManyToOne(cascade = CascadeType.ALL)
  @JoinColumn(name = "manager_id", referencedColumnName = "id")
  private Manager manager;
Для класса таблицы managers никаких доп полей не создавали, но в классе Manager прописали поле:

  @OneToMany(mappedBy = "manager")      // В поле mappedBy ссылка на то , как имя поле называется в классе Client
  List<Client> clients = new ArrayList<>();
Теперь связи работают отлично и если выбрать менеджера, то к нему в выборку попадут все его клиенты. И наоборот, при выборе клиента - в выборке будет и его менеджер и клиенты этого менеджера.

Все это можно проверить на результатах выборки в сервисах. Но если отправить такие объекты в REST, То при попытке преобразования в JSON будет рекурсивная ошибка(как на уроке)

5. Передача данных через JSON

Для избежания ошибки с переполнением стека при преобразовании объекта в JSON(ошибки как на занятии), Есть три варианта решения вопроса(2 без DTO, 1 c DTO).

a) Отправка в JSON Объектов из базы данных. Исключаем преобразование связного объекта на одной стороне.

Необходимо использовать две дополнительные аннотации:

В классе Client, над полем manager - @JsonBackReference (исключит вывод этого поля)

В классе Manager над полем List clients = new ArrayList<>(); - @JsonManagedReference

b) Отправка в JSON Объектов из базы данных. Выводим все поля и все связи.

Необходимо проставить над классом Manager следующую аннотацию:

  @JsonIdentityInfo(
  generator = ObjectIdGenerators.PropertyGenerator.class,
  property = "id")
Теперь при выборке менеджера будут выбраны все его клиенты и наоборот, при выборе клиента будет выбран и его менеджер и клиенты этого менеджера(что не совсем удобно)

с) Не использовать доп аннотации.

Использовать ClientDTO и ManagerDTO , что бы ограничивать поля передаваемые в JSON Данный вариант представлен в примере.

https://github.com/IuriiAV/financeapp/blob/master/src/test/java/org/telran/project/controller/ClientControllerTest.java